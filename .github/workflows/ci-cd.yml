name: CI/CD Pipeline

on:
  push:
    branches:
      - master  # 仅 master 分支触发
  workflow_dispatch:  # 支持手动触发

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: 检出代码
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: 设置 gradlew 权限
#      - name: Set execution permissions for gradlew
#        run: chmod +x gradlew

      # Step 3: 设置 JDK 环境
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: 'temurin'

      # Step 4: 安装 Docker Compose 并缓存
      - name: Cache Docker Compose
        id: cache-docker-compose
        uses: actions/cache@v3
        with:
          path: /usr/local/bin/docker-compose
          key: docker-compose-v2.29.2
          restore-keys: docker-compose-

      - name: Install Docker Compose (if not cached)
        if: steps.cache-docker-compose.outputs.cache-hit != 'true'
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
      # Step 4: 缓存 Gradle 缓存
#      - name: Cache Gradle dependencies
#        uses: actions/cache@v3
#        with:
#          path: ~/.gradle/caches
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#          restore-keys: |
#            ${{ runner.os }}-gradle-

      # Step 5: 构建项目
#      - name: Build with Gradle
#        run: ./gradlew clean build

      # Step 6: Docker 登录
      - name: Docker Login
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" crpi-1xu2w221z7lgelkx.cn-shenzhen.personal.cr.aliyuncs.com --password-stdin > /dev/null 2>&1

      # Step 7: 构建并推送 Docker 镜像
      - name: Build and Push Docker Image
        run: |
          docker-compose build
          docker-compose push

      # Step 8: 使用 SSH 部署到服务器
      - name: Deploy to server
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          script: |
            cd /root/gpt-chat-server
            chmod +x deploy.sh  # 添加这一行确保 deploy.sh 有执行权限
            ./deploy.sh
